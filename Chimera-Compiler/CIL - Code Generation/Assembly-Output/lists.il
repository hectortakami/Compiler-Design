// Code generated by the chimera compiler

.assembly 'Chimera' {}
.assembly extern 'ChimeraLib' {}
.class public 'ChimeraProgram' extends ['mscorlib']'System'.'Object' {

	.field public static int32[] 'lst'
	.field public static int32 'one'
	.field public static string 's'
	.field public static int32 'two'

	.method public static void 'Print'(int32[] lst){
		.locals init (
			int32 __i_index, 
			bool first, 
			int32 i
		)

		ldc.i4 0
		stloc '__i_index'
		ldc.i4.0
		stloc 'first'
		ldc.i4 0
		stloc 'i'

		ldc.i4.1
		stloc first
		ldstr "{"
		call void class ['ChimeraLib']'Chimera'.Lib::'WrStr'(string)
		ldc.i4.0
		stloc __i_index
		ldarg lst
	for_0:
		dup
		ldloc __i_index
		ldelem.i4
		stloc i


	If_1_0_condition:
		ldloc first
		brzero If_1_1_condition
	If_1_0_body:
		ldc.i4.0
		stloc first
		br If_1_End

	If_1_1_condition:
		ldstr ", "
		call void class ['ChimeraLib']'Chimera'.Lib::'WrStr'(string)
		br If_1_End

	If_1_2_condition:
	If_1_End:
		ldloc i
		call void class ['ChimeraLib']'Chimera'.Lib::'WrInt'(int32)

		ldloc __i_index
		ldc.i4.1
		add
		stloc __i_index
	next_0:
		dup
		ldlen
		conv.i4
		ldloc __i_index
		bgt for_0
	end_0:
		pop
		ldstr "}"
		call void class ['ChimeraLib']'Chimera'.Lib::'WrStr'(string)
		ret
	}
	.method public static int32 'Sum'(int32[] lst){
		.locals init (
			int32 __i_index, 
			int32 i, 
			int32 sum
		)

		ldc.i4 0
		stloc '__i_index'
		ldc.i4 0
		stloc 'i'
		ldc.i4 0
		stloc 'sum'

		ldc.i4 0
		stloc sum
		ldc.i4.0
		stloc __i_index
		ldarg lst
	for_2:
		dup
		ldloc __i_index
		ldelem.i4
		stloc i

		ldloc sum
		ldloc i
		add.ovf
		stloc sum

		ldloc __i_index
		ldc.i4.1
		add
		stloc __i_index
	next_2:
		dup
		ldlen
		conv.i4
		ldloc __i_index
		bgt for_2
	end_2:
		pop
		ldloc sum
		ret
		ret
	}
	.method public static int32 'Max'(int32[] lst){
		.locals init (
			int32 i, 
			int32 largest, 
			int32 n
		)

		ldc.i4 0
		stloc 'i'
		ldc.i4 0
		stloc 'largest'
		ldc.i4 0
		stloc 'n'

		ldarg lst
		call int32 class ['ChimeraLib']'Chimera'.Lib::'LenLstInt'(int32[])
		stloc n

	If_3_0_condition:
		ldloc n
		ldc.i4 0
		ceq
		brzero If_3_1_condition
	If_3_0_body:
		ldc.i4 0
		ret
		br If_3_End

	If_3_1_condition:
	If_3_End:
		ldarg lst
		ldc.i4 0
		ldelem.i4
		stloc largest
		ldc.i4 1
		stloc i
	loop_4:

	If_5_0_condition:
		ldloc i
		ldloc n
		clt
		ldc.i4.1
		xor
		brzero If_5_1_condition
	If_5_0_body:
		br end_4
		br If_5_End

	If_5_1_condition:
		ldarg lst
		ldloc i
		ldelem.i4
		ldloc largest
		cgt
		brzero If_5_2_condition

	If_5_1_body:
		ldarg lst
		ldloc i
		ldelem.i4
		stloc largest
		br If_5_End

	If_5_2_condition:
	If_5_End:
		ldloc i
		ldc.i4 1
		add.ovf
		stloc i
		br loop_4
	end_4:
		ldloc largest
		ret
		ret
	}
	.method public static void 'BubbleSort'(int32[] lst){
		.locals init (
			int32 i, 
			int32 j, 
			int32 n, 
			bool swap, 
			int32 t
		)

		ldc.i4 0
		stloc 'i'
		ldc.i4 0
		stloc 'j'
		ldc.i4 0
		stloc 'n'
		ldc.i4.0
		stloc 'swap'
		ldc.i4 0
		stloc 't'

		ldarg lst
		call int32 class ['ChimeraLib']'Chimera'.Lib::'LenLstInt'(int32[])
		stloc n
		ldc.i4 0
		stloc i
	loop_6:

	If_7_0_condition:
		ldloc i
		ldloc n
		ldc.i4 1
		sub.ovf
		ceq
		brzero If_7_1_condition
	If_7_0_body:
		br end_6
		br If_7_End

	If_7_1_condition:
	If_7_End:
		ldc.i4.0
		stloc swap
		ldc.i4 0
		stloc j
	loop_8:

	If_9_0_condition:
		ldloc j
		ldloc n
		ldloc i
		sub.ovf
		ldc.i4 1
		sub.ovf
		ceq
		brzero If_9_1_condition
	If_9_0_body:
		br end_8
		br If_9_End

	If_9_1_condition:
		ldarg lst
		ldloc j
		ldc.i4 1
		add.ovf
		ldelem.i4
		ldarg lst
		ldloc j
		ldelem.i4
		clt
		brzero If_9_2_condition

	If_9_1_body:
		ldarg lst
		ldloc j
		ldelem.i4
		stloc t
		ldarg lst
		ldloc j
		ldarg lst
		ldloc j
		ldc.i4 1
		add.ovf
		ldelem.i4
		stelem.i4
		ldarg lst
		ldloc j
		ldc.i4 1
		add.ovf
		ldloc t
		stelem.i4
		ldc.i4.1
		stloc swap
		br If_9_End

	If_9_2_condition:
	If_9_End:
		ldloc j
		ldc.i4 1
		add.ovf
		stloc j
		br loop_8
	end_8:

	If_10_0_condition:
		ldloc swap
		ldc.i4.1
		xor
		brzero If_10_1_condition
	If_10_0_body:
		br end_6
		br If_10_End

	If_10_1_condition:
	If_10_End:
		ldloc i
		ldc.i4 1
		add.ovf
		stloc i
		br loop_6
	end_6:
		ret
	}
	.method public static void main(){
		.entrypoint

		ldc.i4 1
		newarr int32
		dup
		ldc.i4 0
		ldc.i4 0
		stelem.i4

		stsfld int32[] class ['Chimera']'ChimeraProgram'::'lst'
		ldc.i4 0
		stsfld int32 class ['Chimera']'ChimeraProgram'::'one'
		ldstr ""
		stsfld string class ['Chimera']'ChimeraProgram'::'s'
		ldc.i4 0
		stsfld int32 class ['Chimera']'ChimeraProgram'::'two'

		ldc.i4 20
		newarr int32
		dup
		ldc.i4 0
		ldc.i4 73
		stelem.i4
		dup
		ldc.i4 1
		ldc.i4 77
		stelem.i4
		dup
		ldc.i4 2
		ldc.i4 56
		stelem.i4
		dup
		ldc.i4 3
		ldc.i4 10
		stelem.i4
		dup
		ldc.i4 4
		ldc.i4 14
		stelem.i4
		dup
		ldc.i4 5
		ldc.i4 54
		stelem.i4
		dup
		ldc.i4 6
		ldc.i4 75
		stelem.i4
		dup
		ldc.i4 7
		ldc.i4 62
		stelem.i4
		dup
		ldc.i4 8
		ldc.i4 71
		stelem.i4
		dup
		ldc.i4 9
		ldc.i4 10
		stelem.i4
		dup
		ldc.i4 10
		ldc.i4 3
		stelem.i4
		dup
		ldc.i4 11
		ldc.i4 71
		stelem.i4
		dup
		ldc.i4 12
		ldc.i4 16
		stelem.i4
		dup
		ldc.i4 13
		ldc.i4 49
		stelem.i4
		dup
		ldc.i4 14
		ldc.i4 66
		stelem.i4
		dup
		ldc.i4 15
		ldc.i4 91
		stelem.i4
		dup
		ldc.i4 16
		ldc.i4 69
		stelem.i4
		dup
		ldc.i4 17
		ldc.i4 62
		stelem.i4
		dup
		ldc.i4 18
		ldc.i4 25
		stelem.i4
		dup
		ldc.i4 19
		ldc.i4 65
		stelem.i4
		stsfld int32[] class ['Chimera']'ChimeraProgram'::'lst'
		ldsfld int32[] class ['Chimera']'ChimeraProgram'::'lst'
		call void class ['Chimera']'ChimeraProgram'::'Print'(int32[])
		call void class ['ChimeraLib']'Chimera'.Lib::'WrLn'()
		ldsfld int32[] class ['Chimera']'ChimeraProgram'::'lst'
		call int32 class ['Chimera']'ChimeraProgram'::'Sum'(int32[])
		stsfld int32 class ['Chimera']'ChimeraProgram'::'one'
		ldsfld int32[] class ['Chimera']'ChimeraProgram'::'lst'
		call int32 class ['Chimera']'ChimeraProgram'::'Max'(int32[])
		stsfld int32 class ['Chimera']'ChimeraProgram'::'two'
		ldsfld int32 class ['Chimera']'ChimeraProgram'::'one'
		call void class ['ChimeraLib']'Chimera'.Lib::'WrInt'(int32)
		call void class ['ChimeraLib']'Chimera'.Lib::'WrLn'()
		ldsfld int32 class ['Chimera']'ChimeraProgram'::'two'
		call void class ['ChimeraLib']'Chimera'.Lib::'WrInt'(int32)
		call void class ['ChimeraLib']'Chimera'.Lib::'WrLn'()
		ldsfld int32[] class ['Chimera']'ChimeraProgram'::'lst'
		call void class ['Chimera']'ChimeraProgram'::'BubbleSort'(int32[])
		ldsfld int32[] class ['Chimera']'ChimeraProgram'::'lst'
		call void class ['Chimera']'ChimeraProgram'::'Print'(int32[])
		call void class ['ChimeraLib']'Chimera'.Lib::'WrLn'()
		ret
	}
}
